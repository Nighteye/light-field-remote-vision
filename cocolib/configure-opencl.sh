#!/bin/bash
# Check for OpenCL capability
echo "Testing for OpenCL development support ..."

# Create new cocolib defs file
cp cocolib/defs.h.in cocolib/defs.h

# Clear extra library info
rm -f extra_libs.pri
touch extra_libs.pri

rm -f ann_lib.pri
touch ann_lib.pri

rm -f extra_qmake_flags.pri
touch extra_qmake_flags.pri


# Check for additional desired flags
source local_flags.inc

# Check if minimal example compiles
g++ -o ./config_tests/test_cl ./config_tests/test_cl.cpp -I$LOCAL_OPENCL_INCLUDE_PATH $OPENCL_LIB
if [ $? -ne 0 ]; then
  echo ""
  echo "  ERROR: compiler returned an error."
  echo "         install OpenCL development libraries, check scripts"
  echo "         'install_nvidia_opencl.sh' or 'install_intel_opencl.sh'."
  echo "         in this directory."
  echo ""
  exit
else 
  echo "  OpenCL test compiled successfully."
fi

# Query for default device
./config_tests/test_cl
DEFAULT_CL_DEVICE=$?
if [ $DEFAULT_CL_DEVICE -eq 255 ]; then
    echo ""
    echo "ERROR: Failed to query OpenCL compute devices."
    echo "       ICD may not be installed correctly."
    echo ""
    exit
else
    echo "Setting default OpenCL platform/device to "$DEFAULT_CL_DEVICE.
    sed '1 i\
// AUTO-GENERATED BY CONFIGURE, DO NOT EDIT\
#include <cl.h>\
' ./cocolib/defs.h > ./cocolib/defs.h.bak
mv ./cocolib/defs.h.bak ./cocolib/defs.h

    echo "#define OPENCL_DEFAULT_PLATFORM_DEVICE "$DEFAULT_CL_DEVICE >> cocolib/defs.h
    echo "#define COMPUTE_API_BUFFER_TYPE cl_mem" >> cocolib/defs.h
    echo "LIBS += "$OPENCL_LIB >> extra_libs.pri
fi

echo "QMAKE_CXXFLAGS += "$GCC_EXTRA_LOCAL_FLAGS" -I"$LOCAL_INCLUDE_PATH" -I"$LOCAL_OPENCL_INCLUDE_PATH   >> extra_qmake_flags.pri

# Check for GSL library
echo "Testing for GSL library ..."
g++ -o ./config_tests/test_gsl ./config_tests/test_gsl.cpp -lgsl -lgslcblas -I$LOCAL_INCLUDE_PATH -L$LOCAL_LIB_PATH 
if [ $? -ne 0 ]; then
  echo "  ERROR: compiler returned an error."
  echo "         GSL library might not be installed."
  echo "         On Ubuntu systems, this is the package libgsl0-dev."
  exit
else 
  echo "  compiled successfully."
fi
./config_tests/test_gsl
if [ $? -ne 0 ]; then
    echo "WARNING: GSL example returned an error code."
    echo "         Something might be wrong with the installation."
else
    echo "  run successfully."
fi


# Check for ANN library
echo "Testing for ANN library ..."
g++ -o ./config_tests/test_ann ./config_tests/test_ann.cu -lann -I$LOCAL_INCLUDE_PATH -L$LOCAL_LIB_PATH
if [ $? -ne 0 ]; then
  echo "  failed to compile ANN library example."
  echo "  the library is probably not installed,"
  echo "  cocolib will compile without ANN support."
  echo "//#define LIB_ANN" >> cocolib/defs.h
else 
  echo "  compiled successfully, library seems to be installed."
  echo "#define LIB_ANN" >> cocolib/defs.h
  echo "LIBS += -lann" >> ann_lib.pri
fi
echo "#endif" >> cocolib/defs.h

# QT4 development tools
echo "Testing for qt4 development tools ..."
QMAKE="qmake-qt4 $QMAKE_OPTIONS"
qt4_test=$(${QMAKE} --version | grep "version 4.")
if [ -z "$qt4_test" ]; then
  # try with plain qmake
  echo "qmake-qt4 failed: Testing with qmake ..."
  QMAKE="qmake $QMAKE_OPTIONS"
  qt4_test=$(${QMAKE} --version | grep "version 4.")
  if [ -z "$qt4_test" ]; then
    echo "  ERROR: failed to detect Qt4."
    echo "         Make sure you have libqt4-dev installed."
    exit
  else
    echo "  success."
  fi
else 
  echo "  success."
fi


# creating OPENCL project files
echo "Generating OPENCL project files ..."
cp ./cocolib.pro.opencl ./cocolib.pro

sed '1 i\
# AUTO-GENERATED BY CONFIGURE, DO NOT EDIT\
' cocolib.pro > cocolib.pro.bak
mv cocolib.pro.bak cocolib.pro

cp ./cocolib/cocolib.pro.opencl ./cocolib/cocolib.pro
sed '1 i\
# AUTO-GENERATED BY CONFIGURE, DO NOT EDIT\
' ./cocolib/cocolib.pro > ./cocolib/cocolib.pro.bak
mv ./cocolib/cocolib.pro.bak ./cocolib/cocolib.pro

cp ./examples++/examples++.pro.opencl ./examples++/examples++.pro
sed '1 i\
# AUTO-GENERATED BY CONFIGURE, DO NOT EDIT\
' ./examples++/examples++.pro > ./examples++/examples++.pro.bak
mv ./examples++/examples++.pro.bak ./examples++/examples++.pro


# run qmake to create Makefile
echo "Running 'qmake-qt4' for cocolib ..."
${QMAKE} cocolib.pro
if [ $? -ne 0 ]; then
  echo "  ERROR: qmake-qt4 returned an error."
  exit
else 
  echo "  success."
fi

# clean up
echo "Cleaning up previous builds ..."
make --quiet clean

# done.
echo "Ready, run 'make' to build cocolib."
